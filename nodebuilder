#!/bin/bash
#
# A minimally-interactive script for launching a Bitcoin Core node
set -o errexit
set -o nounset
set -o pipefail

is_running_in_container() {
  if [ -f /proc/1/cgroup ] && [ "$(grep --count 'docker\|lxc\|actions_job' /proc/1/cgroup)" -gt 0 ]; then
    return 0 #0=true
  elif [ -f /proc/1/mountinfo ] && [ "$(grep --count 'docker\|lxc\|actions_job' /proc/1/mountinfo)" -gt 0 ]; then
    return 0 #0=true
  else
    return 1 #1=false
  fi
}

set_bitcoin_core_option() {
  if [ -f "${bitcoin_core_config_file:?}" ]; then
    sed -i.bak "/^$1=/d" "${bitcoin_core_config_file:?}"
    rm "${bitcoin_core_config_file:?}.bak"
  else
    install -m 600 /dev/null "${bitcoin_core_config_file:?}"
  fi
  printf '%s\n' "$1=$2" >> "${bitcoin_core_config_file:?}"
}

set_if_unset_bitcoin_core_option() {
  if [ ! -f "${bitcoin_core_config_file:?}" ]; then
    install -m 600 /dev/null "${bitcoin_core_config_file:?}"
    printf '%s\n' "$1=$2" >> "${bitcoin_core_data_dir:?}"
  elif [ "$(grep --count --ignore-case "^$1=" "${bitcoin_core_config_file:?}")" == "0" ]; then
    printf '%s\n' "$1=$2" >> "${bitcoin_core_data_dir:?}"
  fi
}

log_error() {
  printf '%s\n' "[$(date +'%Y-%m-%dT%H:%M:%S')] ERROR: $*" >&2
}

# shellcheck disable=SC2317
ensure_cursor_is_on_column_one() {
  if [ "$(uname -s)" == "Darwin" ]; then
    printf '\n'
  else
    printf '%s' "\E[6n"
    read -rsdR cursor_position
    cursor_position="${cursor_position#*[}"
    cursor_position_column="$(echo "${cursor_position}" | cut -d ";" -f 2)"
    ([ "${cursor_position_column}" -gt 1 ] && echo) || true
  fi
}

# shellcheck disable=SC2317
handle_exit() {
  [ -n "${temp_directory}" ] && rm -rf -- "${temp_directory:?}"/
}

# shellcheck disable=SC2317
handle_error() {
  ensure_cursor_is_on_column_one
  log_error "Failed to run '${BASH_COMMAND}' on line $1."
  printf '%s\n' "Exiting."
  handle_exit
  exit 1
}

trap handle_exit EXIT
trap 'handle_error ${LINENO:-}' ERR

target_bitcoin_version="26.0"
target_bitcoin_architecture="$(uname -m)"

temp_directory="$(mktemp -d)"
user_data_dir="${XDG_DATA_HOME:-${HOME}/.local/share}"
shortcut_image_source="https://github.com/bitcoin-tools/nodebuilder/raw/master/data/bitcoin.png"
shortcut_image_file="${user_data_dir}/images/bitcoin.png"

clear
if is_running_in_container; then
  printf '%s\n' "Detected: running in a container."
fi
case "$(uname -s)" in
Linux)
  printf '%s\n' "Detected: running on Linux."
  ( (timeout --preserve-status 1 nc -z 1.1.1.1 53 ||
    timeout --preserve-status 1 nc -z 1.1.0.0 53 ||
    timeout --preserve-status 1 nc -z 9.9.9.9 53 ||
    timeout --preserve-status 1 nc -z 9.9.9.11 53) &&
    timeout --preserve-status 5 nc -z bitcoincore.org 443) || {
    handle_error "Check for active internet failed."
  }

  target_bitcoin_operating_system="linux-gnu"
  bitcoin_core_data_dir="${HOME}/.bitcoin"
  printf '%s' "Performing a system upgrade... "
  sudo apt-get -qq update
  sudo NEEDRESTART_MODE=a apt-get -qq dist-upgrade > /dev/null

  if [ -f /var/run/reboot-required ] && [ "${CI:-false}" = false ]; then
    printf '%s' "\nREBOOT REQUIRED to upgrade the following:\n$(cat /var/run/reboot-required.pkgs)\n\nPRESS ANY KEY to reboot or press Ctrl+C to exit... "
    read -rsn1
    printf '%s\n' "\nRebooting."
    sudo reboot
    exit 0
  fi
  printf '%s\n' "ok."

  printf '%s' "Checking for dependencies... "
  sudo apt-get -qq install --no-install-recommends bc curl git gnupg jq > /dev/null
  printf '%s\n' "ok."
  ;;
Darwin)
  printf '%s\n' "Detected: Running on macOS."
  ( (curl --silent --output /dev/null --connect-timeout 1 1.1.1.1 ||
    curl --silent --output /dev/null --connect-timeout 1 1.1.0.0 ||
    curl --silent --output /dev/null --connect-timeout 1 9.9.9.9 ||
    curl --silent --output /dev/null --connect-timeout 1 9.9.9.11) &&
    curl --silent --output /dev/null --connect-timeout 1 bitcoincore.org) || {
    handle_error "Check for active internet failed."
  }

  target_bitcoin_operating_system="apple-darwin"
  bitcoin_core_data_dir="${HOME}/Library/Application Support/Bitcoin"

  if ! command -v git &> /dev/null; then
    printf '%s' "Installing git via the Xcode Command Line Tools."
    # These steps were taken from https://github.com/Homebrew/install/blob/aceed88a4a062e2b41dc40a7428c71309fce14c9/install.sh#L831
    # TODO: find a way to install only the git binary, not all the Xcode tools. Unattended xcode tools installation shouldn't take 10+ lines of code
    sudo touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
    clt_label_command="/usr/sbin/softwareupdate -l | grep -B 1 -E 'Command Line Tools' | awk -F'*' '/^ *\\*/ {print \$2}' | sed -e 's/^ *Label: //' -e 's/^ *//' | sort -V | tail -n1"
    clt_label="$(chomp "$(/bin/bash -c "${clt_label_command}")")"
    if [[ -n "${clt_label}" ]]; then
      sudo /usr/sbin/softwareupdate -i "${clt_label}" > /dev/null
      #sudo /usr/bin/xcode-select --switch /Library/Developer/CommandLineTools
    fi
    sudo rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    if command -v git &> /dev/null; then
      printf '%s\n' "ok."
    else
      printf '%s\n' "failed."
      printf '%s\n' "Installing the Command Line Tools (expect a GUI popup)."
      /usr/bin/xcode-select --install
      printf '%s\n' "Press any key when the installation has completed."
      read -rsn1
      #sudo /usr/bin/xcode-select --switch /Library/Developer/CommandLineTools
    fi
  fi
  ;;
*)
  handle_error "Your operating system is not supported."
  ;;
esac

printf '%s' "Checking for Bitcoin Core version ${target_bitcoin_version}... "
if command -v bitcoin-qt &> /dev/null; then
  current_bitcoin_version="$(bitcoin-qt --version 2> /dev/null | head -1)"
else
  current_bitcoin_version=""
fi

if [ -n "${current_bitcoin_version}" ] && [[ "${current_bitcoin_version}" == *"${target_bitcoin_version}"* ]]; then
  printf '%s\n' "ok."
else
  printf '\n'
  bitcoin_core_extract_dir="${temp_directory}/bitcoin-core"
  bitcoin_install_bin_source="${bitcoin_core_extract_dir}/bin"
  bitcoin_install_include_source="${bitcoin_core_extract_dir}/include"
  bitcoin_install_lib_source="${bitcoin_core_extract_dir}/lib"
  bitcoin_install_man_source="${bitcoin_core_extract_dir}/share/man/man1"
  bitcoin_install_bin_destination="/usr/local/bin"
  bitcoin_install_include_destination="/usr/local/include"
  bitcoin_install_lib_destination="/usr/local/lib"
  bitcoin_install_man_destination="/usr/local/share/man/man1"

  bitcoin_tarball_filename="bitcoin-${target_bitcoin_version}-${target_bitcoin_architecture}-${target_bitcoin_operating_system}.tar.gz"
  bitcoin_tarball_destination_file="${HOME}/Downloads/${bitcoin_tarball_filename}"

  if ! [ -f "${bitcoin_tarball_destination_file}" ]; then
    bitcoin_source="https://bitcoincore.org/bin/bitcoin-core-${target_bitcoin_version}"
    bitcoin_tarball_file_source="${bitcoin_source}/${bitcoin_tarball_filename}"
    bitcoin_hash_filename="SHA256SUMS"
    bitcoin_hash_file_source="${bitcoin_source}/${bitcoin_hash_filename}"
    gpg_signatures_filename="SHA256SUMS.asc"
    gpg_signatures_file_source="${bitcoin_source}/${gpg_signatures_filename}"
    gpg_good_signatures_required="7"
    guix_sigs_repo="https://github.com/bitcoin-core/guix.sigs.git"
    bitcoin_tarball_temporary_file="${temp_directory}/${bitcoin_tarball_filename}"
    bitcoin_hash_file="${temp_directory}/${bitcoin_hash_filename}"
    gpg_signatures_file="${temp_directory}/${gpg_signatures_filename}"
    guix_sigs_temporary_dir="${temp_directory}/guix.sigs"
    guix_sigs_destination_dir="${HOME}/Downloads/guix.sigs"

    printf '%s' "  Downloading Bitcoin Core... "
    curl --silent --show-error --location --fail --output "${bitcoin_tarball_temporary_file}" "${bitcoin_tarball_file_source}"
    curl --silent --show-error --location --fail --output "${bitcoin_hash_file}" "${bitcoin_hash_file_source}"
    curl --silent --show-error --location --fail --output "${gpg_signatures_file}" "${gpg_signatures_file_source}"
    printf '%s\n' "ok."

    printf '%s' "  Validating the checksum... "
    cd "${temp_directory}"/
    if command -v sha256sum > /dev/null; then
      sha256_check="$(grep "${bitcoin_tarball_filename}" "${bitcoin_hash_filename}" | sha256sum --check 2> /dev/null)"
    elif command -v shasum > /dev/null; then
      sha256_check="$(grep "${bitcoin_tarball_filename}" "${bitcoin_hash_filename}" | shasum -a 256 --check 2> /dev/null)"
    else
      handle_error "Either 'sha256sum' or 'shasum' must on PATH."
    fi
    cd "${HOME}"/
    if ! [[ "${sha256_check}" == *"OK" ]]; then
      handle_error "INVALID CHECKSUM. The download has failed. This script cannot continue due to security concerns. Please review the temporary file ${temp_directory}/${bitcoin_hash_file}."
    fi
    printf '%s\n' "ok."

    printf '%s' "  Validating the signatures... "
    if [ -d "${guix_sigs_destination_dir}"/ ]; then
      gpg --quiet --import "${guix_sigs_destination_dir}"/builder-keys/*.gpg
    else
      git clone --single-branch --depth 1 --quiet "${guix_sigs_repo}" "${guix_sigs_temporary_dir}"
      gpg --quiet --import "${guix_sigs_temporary_dir}"/builder-keys/*.gpg
    fi
    gpg_good_signature_count=$(gpg --verify "${gpg_signatures_file}" 2>&1 | grep -c "^gpg: Good signature from ")
    if [[ "${gpg_good_signature_count}" -ge "${gpg_good_signatures_required}" ]]; then
      printf '%s\n' "${gpg_good_signature_count} good."
      [ -d "$(dirname "${bitcoin_tarball_destination_file}")" ] || mkdir -p "$(dirname "${bitcoin_tarball_destination_file}")"
      mv "${bitcoin_tarball_temporary_file}" "${bitcoin_tarball_destination_file}"
      [ -d "${guix_sigs_destination_dir}"/ ] || mv "${guix_sigs_temporary_dir}" "${guix_sigs_destination_dir}"
      rm "${bitcoin_hash_file}"
      rm "${gpg_signatures_file}"
    else
      handle_error "INVALID SIGNATURES. The download has failed. This script cannot continue due to security concerns. Please review the temporary file ${temp_directory}/${gpg_signatures_file}."
    fi
  fi

  printf '%s' "  Extracting Bitcoin Core... "
  [ -d "${bitcoin_core_extract_dir}"/ ] || mkdir "${bitcoin_core_extract_dir}"
  tar -xzf "${bitcoin_tarball_destination_file}" -C "${bitcoin_core_extract_dir}"/ --strip-components=1
  printf '%s\n' "ok."

  printf '%s' "  Running the unit tests... "
  if [ "${target_bitcoin_architecture}" == "arm64" ]; then
    codesign -s - "${bitcoin_install_bin_source}"/test_bitcoin
  fi
  unit_test_response="$("${bitcoin_install_bin_source}"/test_bitcoin 2>&1)"
  if [[ "${unit_test_response}" != *"No errors detected"* ]]; then
    printf '%s\n' "\n${unit_test_response}"
    handle_error "Unit tests failed."
  fi
  printf '%s\n' "ok."

  printf '%s' "  Installing Bitcoin Core... "
  [ -d "${bitcoin_install_lib_destination}" ] || mkdir -p "${bitcoin_install_lib_destination}" 2> /dev/null || sudo mkdir "${bitcoin_install_lib_destination}" || handle_error "Unable to create directory ${bitcoin_install_lib_destination}"
  case "$(uname -s)" in
  Linux)
    sudo cp "${bitcoin_install_lib_source}"/libbitcoinconsensus.so.0.0.0 "${bitcoin_install_lib_destination}"/libbitcoinconsensus.so.0.0.0
    (cd "${bitcoin_install_lib_destination}"/ && { sudo ln -s -f libbitcoinconsensus.so.0.0.0 libbitcoinconsensus.so.0 || { sudo rm -f libbitcoinconsensus.so.0 && sudo ln -s libbitcoinconsensus.so.0.0.0 libbitcoinconsensus.so.0; }; })
    (cd "${bitcoin_install_lib_destination}"/ && { sudo ln -s -f libbitcoinconsensus.so.0.0.0 libbitcoinconsensus.so || { sudo rm -f libbitcoinconsensus.so && sudo ln -s libbitcoinconsensus.so.0.0.0 libbitcoinconsensus.so; }; })
    PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/sbin" ldconfig -n "${bitcoin_install_lib_destination}"
    ;;
  Darwin)
    sudo cp "${bitcoin_install_lib_source}"/libbitcoinconsensus.0.dylib "${bitcoin_install_lib_destination}"/libbitcoinconsensus.0.dylib
    (cd "${bitcoin_install_lib_destination}"/ && { sudo ln -s -f libbitcoinconsensus.0.dylib libbitcoinconsensus.dylib || { sudo rm -f libbitcoinconsensus.dylib && sudo ln -s libbitcoinconsensus.0.dylib libbitcoinconsensus.dylib; }; })
    sudo update_dyld_shared_cache

    if [ "${target_bitcoin_architecture}" == "arm64" ]; then
      for bitcoin_executable in {bitcoin-cli,bitcoin-qt,bitcoin-tx,bitcoin-util,bitcoin-wallet,bitcoind}; do
        codesign -s - "${bitcoin_install_bin_source}"/"${bitcoin_executable}"
      done
    fi
    ;;
  *)
    handle_error "Your operating system is not supported."
    ;;
  esac

  [ -d "${bitcoin_install_bin_destination}" ] || mkdir -p "${bitcoin_install_bin_destination}" 2> /dev/null || sudo mkdir "${bitcoin_install_bin_destination}" || handle_error "Unable to create directory ${bitcoin_install_bin_destination}"
  sudo install -c "${bitcoin_install_bin_source}"/{bitcoind,bitcoin-qt,bitcoin-cli,bitcoin-tx,bitcoin-util,bitcoin-wallet,test_bitcoin} "${bitcoin_install_bin_destination}"/

  [ -d "${bitcoin_install_include_destination}" ] || mkdir -p "${bitcoin_install_include_destination}" 2> /dev/null || sudo mkdir "${bitcoin_install_include_destination}" || handle_error "Unable to create directory ${bitcoin_install_include_destination}"
  sudo install -c -m 644 "${bitcoin_install_include_source}"/bitcoinconsensus.h "${bitcoin_install_include_destination}"/

  [ -d "${bitcoin_install_man_destination}" ] || mkdir -p "${bitcoin_install_man_destination}" 2> /dev/null || sudo mkdir -p "${bitcoin_install_man_destination}" || handle_error "Unable to create directory ${bitcoin_install_man_destination}"
  sudo install -c -m 644 "${bitcoin_install_man_source}"/{bitcoind.1,bitcoin-qt.1,bitcoin-cli.1,bitcoin-tx.1,bitcoin-util.1,bitcoin-wallet.1} "${bitcoin_install_man_destination}"/
  printf '%s\n' "ok."

  printf '%s' "  Removing temporary files... "
  rm -r "${bitcoin_core_extract_dir:?}"/
  rm -r "${temp_directory:?}"/
  printf '%s\n' "ok."
fi

if [ "$(uname -s)" != "Darwin" ]; then
  printf '%s' "Creating application shortcuts... "
  desktop_path="${HOME}/Desktop"
  applications_path="${user_data_dir}/applications"
  shortcut_filename="bitcoin_core.desktop"

  [ -d "$(dirname "${shortcut_image_file}")" ] || mkdir -p "$(dirname "${shortcut_image_file}")"
  [ -f "${shortcut_image_file}" ] || curl --silent --show-error --location --fail --output "${shortcut_image_file}" "${shortcut_image_source}"

  ## Create .desktop on the user's Desktop and "Show Applications" directories
  [ -d "${desktop_path}" ] || mkdir -p "${desktop_path}"
  [ -d "${applications_path}" ] || mkdir -p "${applications_path}"
  cat << EOF | tee "${applications_path}"/"${shortcut_filename}" > "${desktop_path}"/"${shortcut_filename}"
[Desktop Entry]
Name=Bitcoin Core
Comment=Launch Bitcoin Core
Exec=bitcoin-qt %u
Icon=${shortcut_image_file}
Terminal=false
StartupWMClass=Bitcoin Core
Type=Application
Categories=Application;
MimeType=application/bitcoin-paymentrequest;application/bitcoin-payment;application/bitcoin-paymentack;x-scheme-handler/bitcoin;
EOF
  chmod u+x "${applications_path}"/"${shortcut_filename}"
  chmod u+x "${desktop_path}"/"${shortcut_filename}"
  ## Make the desktop shortcut trusted
  if [ "${CI:-false}" = false ] && ! is_running_in_container; then
    gio set "${desktop_path}"/"${shortcut_filename}" "metadata::trusted" true
  fi
  printf '%s\n' "ok."
fi

bitcoin_core_config_file="${bitcoin_core_data_dir}/bitcoin.conf"
if [ ! -f "${bitcoin_core_config_file}" ]; then
  printf '%s' "Setting the default node behavior... "
  [ -d "${bitcoin_core_data_dir}"/ ] || mkdir "${bitcoin_core_data_dir}"/
  set_bitcoin_core_option "server" "1"
  set_bitcoin_core_option "mempoolfullrbf" "1"
  set_bitcoin_core_option "v2transport" "1"
  printf '%s\n' "ok."
fi

case "$(uname -s)" in
Darwin) ;; #TODO: Add macOS memory check
MINGW*)
  handle_error "Your operating system is not supported."
  ;;
*)
  printf '%s' "Checking the memory on your system... "
  physical_memory_total_in_mib=$(awk '/MemTotal/ { printf "%d \n", $2/1024 }' /proc/meminfo)
  physical_memory_free_in_mib=$(awk '/MemAvailable/ { printf "%d \n", $2/1024 }' /proc/meminfo)
  swap_memory_total_in_mib=$(awk '/SwapTotal/ { printf "%d \n", $2/1024 }' /proc/meminfo)
  swap_memory_free_in_mib=$(awk '/SwapFree/ { printf "%d \n", $2/1024 }' /proc/meminfo)
  memory_total_in_mib=$((physical_memory_total_in_mib + swap_memory_total_in_mib))
  memory_free_in_mib=$((physical_memory_free_in_mib + swap_memory_free_in_mib))
  printf '%0.1f GiB total, %0.1f GiB free.\n' \
    "$(printf '%s\n' "${memory_total_in_mib}/1024" | bc --mathlib)" \
    "$(printf '%s\n' "${memory_free_in_mib}/1024" | bc --mathlib)"

  if [ "${memory_total_in_mib}" -le $((2 * 1024)) ] || [ "${memory_free_in_mib}" -le "64" ]; then
    printf '%s' "Configuring for minimal memory usage... "
    set_if_unset_bitcoin_core_option "dbcache" "4"
    set_if_unset_bitcoin_core_option "maxmempool" "5"
    set_if_unset_bitcoin_core_option "maxconnections" "4"
    [ "$(uname -s)" == "Linux" ] && export MALLOC_ARENA_MAX=1
    printf '%s\n' "ok."
  elif [ "${memory_total_in_mib}" -le $((4 * 1024)) ] || [ "${memory_free_in_mib}" -le "128" ]; then
    printf '%s' "Configuring for reduced memory usage... "
    set_if_unset_bitcoin_core_option "dbcache" "100"
    set_if_unset_bitcoin_core_option "maxmempool" "50"
    set_if_unset_bitcoin_core_option "maxconnections" "10"
    [ "$(uname -s)" == "Linux" ] && export MALLOC_ARENA_MAX=1
    printf '%s\n' "ok."
  elif [ "${memory_total_in_mib}" -le $((8 * 1024)) ] || [ "${memory_free_in_mib}" -le "256" ]; then
    printf '%s' "Configuring for conservative memory usage... "
    set_if_unset_bitcoin_core_option "dbcache" "225"
    set_if_unset_bitcoin_core_option "maxmempool" "150"
    printf '%s\n' "ok."
  fi
  ;;
esac

if [ "$(grep --count --ignore-case "^prune=" "${bitcoin_core_config_file}")" == "0" ]; then
  printf '%s' "Checking free space in home directory... "
  if [ "$(uname -s)" == "Darwin" ]; then
    free_space_in_mib=$(/bin/df -m "${HOME}" | awk '{print $4}' | sed 1d)
  else
    free_space_in_mib=$(df --output=avail --block-size="1MiB" "${HOME}" | sed 1d)
  fi
  printf '%s\n' "$((free_space_in_mib / 1024)) GiB."

  bitcoin_core_blocks_dir="${bitcoin_core_data_dir}/blocks"
  bitcoin_core_chainstate_dir="${bitcoin_core_data_dir}/chainstate"

  printf '%s' "Checking data already synced... "
  blocks_size_in_mib="0"
  chainstate_size_in_mib="0"
  if [ -d "${bitcoin_core_blocks_dir}"/ ]; then
    if [ "$(uname -s)" == "Darwin" ]; then
      blocks_size_in_mib=$(du -d0 -m "${bitcoin_core_blocks_dir}" | cut -f1)
    else
      blocks_size_in_mib=$(du -d0 --block-size="1MiB" "${bitcoin_core_blocks_dir}" | cut -f1)
    fi
  fi
  if [ -d "${bitcoin_core_chainstate_dir}"/ ]; then
    if [ "$(uname -s)" == "Darwin" ]; then
      chainstate_size_in_mib=$(du -d0 -m "${bitcoin_core_chainstate_dir}" | cut -f1)
    else
      chainstate_size_in_mib=$(du -d0 --block-size="1MiB" "${bitcoin_core_chainstate_dir}" | cut -f1)
    fi
  fi
  data_already_synced_in_mib=$((blocks_size_in_mib + chainstate_size_in_mib))
  printf '%s\n' "$((data_already_synced_in_mib / 1024)) GiB."

  ## This constant will need to be adjusted over time as the chain grows
  ## or need to find how to generate this dynamically in a trustless way.
  ## The lower this number is, the more likely disk space errors during IBD.
  ## The higher this number is, the more likely a node will be to prune.
  ## The sweet spot is about 50 to 100 GB more than the size of blocks/ + chainstate/,
  ## which, as of June 2023, is around 522 GiB.
  archival_node_required_disk_in_gib="686"

  archival_node_required_disk_in_mib=$((archival_node_required_disk_in_gib * 1024))

  if [ "${free_space_in_mib}" -ge $((archival_node_required_disk_in_mib - data_already_synced_in_mib)) ]; then
    printf '%s\n' "  Your node will run as an unpruned full node."
    set_bitcoin_core_option "prune" "0"
  elif [ "${free_space_in_mib}" -lt $((archival_node_required_disk_in_mib / 80 - data_already_synced_in_mib)) ]; then
    handle_error "You are too low on disk space to run Bitcoin Core."
  else
    if [ "${free_space_in_mib}" -lt $((archival_node_required_disk_in_mib / 40 - data_already_synced_in_mib)) ]; then
      printf '%s\n' "  Your disk space is low.\n  Setting blocks-only mode and the minimum 0.55 GiB prune."
      set_bitcoin_core_option "blocksonly" "1"
      prune_amount_in_mib="550"
    else
      if [ "${free_space_in_mib}" -lt $((archival_node_required_disk_in_mib / 12 - data_already_synced_in_mib)) ]; then
        prune_ratio=20
      elif [ "${free_space_in_mib}" -lt $((archival_node_required_disk_in_mib / 4 - data_already_synced_in_mib)) ]; then
        prune_ratio=40
      elif [ "${free_space_in_mib}" -lt $((archival_node_required_disk_in_mib * 3 / 4 - data_already_synced_in_mib)) ]; then
        prune_ratio=60
      else
        prune_ratio=80
      fi
      prune_amount_in_mib=$((free_space_in_mib * prune_ratio / 100))
      printf '  Pruning to %d GiB (%d of the free space).\n  You can change this in ~/.bitcoin/bitcoin.conf.' "$((prune_amount_in_mib / 1024))" "${prune_ratio}"
    fi
    set_bitcoin_core_option "prune" "${prune_amount_in_mib}"
  fi
fi

printf '%s' "Starting Bitcoin Core... "
if [ "${CI:-false}" = true ] || is_running_in_container; then
  bitcoind --daemonwait > /dev/null
else
  bitcoin-qt 2> /dev/null &
  disown
fi
printf '%s\n' "ok."
printf '%s' "  Checking the RPC status... "
bitcoin-cli --rpcwait getrpcinfo > /dev/null
printf '%s\n' "ok."

sleep_time="10"
blockchain_info=$(bitcoin-cli --rpcwait getblockchaininfo)
ibd_status=$(jq '.initialblockdownload' <<< "${blockchain_info}")

if [ "${ibd_status}" = true ]; then
  if ! is_running_in_container; then
    printf '%s' "Disabling system sleep, suspend, and hibernate... "
    if [ "$(uname -s)" == "Darwin" ]; then
      caffeinate -sw "$(cat ~/Library/Application\ Support/Bitcoin/bitcoind.pid)" &
    else
      sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target &> /dev/null
    fi
    printf '%s\n' "ok."
    printf '\n%s\n%s' "Close this Terminal window by clicking on the \"X\"." "This screen will refresh in ${sleep_time} seconds."
  fi
  for ((i = 1; i <= sleep_time; i++)); do
    sleep 1
    printf "."
  done
  printf '\n'
else
  printf '%s\n' "  Your node has already synced the blockchain."
fi

while [ "${ibd_status}" = true ]; do
  sync_progress=$(jq '.verificationprogress' <<< "${blockchain_info}")
  # Handle case of early sync by replacing scientific notation with decimal

  if [ "$(echo "${sync_progress}" | grep --count --ignore-case "e")" -gt 0 ]; then
    sync_progress="0.000000001"
  fi
  sync_progress_percent="$(printf '%s\n' "${sync_progress}*100" | bc)"

  blocks=$(jq '.blocks' <<< "${blockchain_info}")
  headers=$(jq '.headers' <<< "${blockchain_info}")
  last_block_time=$(jq '.time' <<< "${blockchain_info}")
  size_on_disk_in_mib=$(($(jq '.size_on_disk' <<< "${blockchain_info}") / 1024 / 1024))

  if [ "$(uname -s)" == "Darwin" ]; then
    free_space_in_mib=$(/bin/df -m "${HOME}" | awk '{print $4}' | sed 1d)
  else
    free_space_in_mib=$(df --output=avail --block-size="1MiB" "${HOME}" | sed 1d)
  fi

  clear
  if [ "${headers}" -eq 0 ]; then
    printf '%s\n' 'Syncing the block headers (first pass).'
  elif [ "${blocks}" -eq 0 ]; then
    printf '%s\n' 'Syncing the block headers (second pass).'
    printf 'Headers synced:     %d\n' "${headers}"
  else
    printf 'Sync progress:      %.3f %%\n' "${sync_progress_percent}"
    printf 'Blocks remaining:   %d\n' "$((headers - blocks))"

    if [ "$(uname -s)" == "Darwin" ]; then
      printf 'Current chain tip:  %s\n' "$(/bin/date -r "${last_block_time}" | cut -c 5-)"
    else
      printf 'Current chain tip:  %s\n' "$(date -d @"${last_block_time}" | cut -c 5-)"
    fi

    printf '%s' 'Chain sync size:    '
    if [ "${size_on_disk_in_mib}" -gt 1024 ]; then
      printf '%d GiB\n' "$((size_on_disk_in_mib / 1024))"
    else
      printf '%d MiB\n' "${size_on_disk_in_mib}"
    fi
  fi

  printf '%s' 'Disk free space:    '
  if [ "${free_space_in_mib}" -gt 1024 ]; then
    printf '%d GiB\n' "$((free_space_in_mib / 1024))"
  else
    printf '%d MiB\n' "${free_space_in_mib}"
  fi

  if { [ "${CI:-false}" = true ] || is_running_in_container; } && [ "${size_on_disk_in_mib}" -ge 1 ]; then
    printf '%s\n' "The IBD sync is progressing. Exiting the script successfully."
    exit 0
  fi

  printf '%s\n\n' "Synchronizing can take weeks on a slow connection."
  printf '%s\n' "Close this Terminal window by clicking on the \"X\"."
  printf '%s' "This screen will refresh in ${sleep_time} seconds."
  sleep "${sleep_time}"

  blockchain_info=$(bitcoin-cli --rpcwait getblockchaininfo)
  printf '\n'
  ibd_status=$(jq '.initialblockdownload' <<< "${blockchain_info}")
done

printf '%s\n' "This script has completed successfully."
exit 0
