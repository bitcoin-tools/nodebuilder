#!/bin/sh
#
# This script standardizes creating new GitHub releases and updating tags

set -o errexit
set -o nounset

# Error handling function
handle_error() {
  echo "An error occurred on line $1" >&2
  exit 1
}

# Trap any errors
trap 'if [ $? -gt 0 ]; then handle_error ${LINENO:-}; fi' EXIT

# Error throwing function
throw_error() {
  # Print the error message to stderr
  echo "$1" >&2

  # Exit with a non-zero status code
  exit 1
}

# Open URL function
open_url() {
  url="$1"
  case "$(uname -s)" in
  Darwin*) open "${url}" ;;
  Linux*) xdg-open "${url}" ;;
  CYGWIN* | MINGW32* | MSYS* | MINGW*) start "${url}" ;;
  *) echo "Unsupported OS, please open the URL manually: ${url}" ;;
  esac
}

# Git operations function
push_changes_to_branch() {
  # Stash any changes if there are any
  if [ -n "$(git status --porcelain)" ]; then
    git stash
  fi

  # Rebase the current branch onto master
  if ! git rebase master; then
    throw_error 'Merge conflict occurred while rebasing. Please resolve the conflict and continue the rebase manually.'
  fi

  # Replace the old version with the new version in all files
  replace_in_files "$1" "$2"
  git diff
  git add .
  git commit -m "feat(release): update Dockerfiles and README to $2 tag"

  # Push the changes to the remote repository
  if ! git push origin "${new_release_tag_branch}"; then
    throw_error 'Failed to push changes to origin. Please check your network connection and authentication.'
  fi
}

# Prepare to push changes
prepare_to_push_changes() {
  # Change to the repository directory
  cd "${REPO_PATH}"
  git checkout master
  git pull origin

  # Get the last release version
  last_release_version="$(git describe --tags "$(git rev-list --tags --max-count=1)")"
  validate_semver "${last_release_version}"

  # Checkout the new release branch
  git checkout "${new_release_tag_branch}"
}

# Replace function
replace_in_files() {
  # Replace the old version with the new version in all files
  if [ "$(uname -s)" = 'Darwin' ]; then
    find . -type f -exec env LANG=C sed -i '' "s/$1/$2/g" {} \;
  else
    find . -type f -exec env LANG=C sed -i "s/$1/$2/g" {} \;
  fi
}

# Validate branch
validate_branch() {
  # Fetch the latest branches from the remote repository
  git fetch origin

  # Check if the branch exists on the remote repository
  if ! git show-ref --verify --quiet refs/remotes/origin/"$1"; then
    throw_error "Branch $1 does not exist on origin. Please enter a valid branch."
  fi

  # Change to the repository directory
  cd "${REPO_PATH}"
}

# Validate SemVer format
validate_semver() {
  # Check if the version is in SemVer format
  if ! echo "$1" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
    throw_error "Invalid version: $1. Version must be in SemVer format without any suffix like '-beta'."
  fi
}

# Define the repository path and URL
REPO_PATH="${HOME}/Documents/GitHub/nodebuilder"
REPO_URL='https://github.com/bitcoin-tools/nodebuilder'

# Check if REPO_PATH is a valid Git repository
if [ ! -d "${REPO_PATH}" ] || ! git -C "${REPO_PATH}" rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  throw_error "Invalid git repository path: ${REPO_PATH}"
fi

# Check if REPO_URL is a valid URL
echo "${REPO_URL}" | grep -qE '^https?://' ||
  throw_error "Invalid URL: ${REPO_URL}"

# Check for dependencies
for cmd in git sed find; do
  if ! command -v "${cmd}" > /dev/null 2>&1; then
    throw_error "${cmd} is not installed. Please install it and try again."
  fi
done

# Get the new release version
new_release_version=''
if [ -n "${NEW_RELEASE_VERSION}" ]; then
  new_release_version="${NEW_RELEASE_VERSION}"
  validate_semver "{new_release_version}"
else
  printf '%s' 'Enter the new release version: '
  read -r new_release_version
  validate_semver "${new_release_version}"
fi

# Get the new release branch
new_release_tag_branch=''
if [ -n "${NEW_RELEASE_TAG_BRANCH}" ]; then
  new_release_tag_branch="${NEW_RELEASE_TAG_BRANCH}"
  validate_branch "${new_release_tag_branch}"
else
  printf '%s' 'Enter the release tag branch: '
  read -r new_release_tag_branch
  validate_branch "${new_release_tag_branch}"
fi

# Open the new beta pre-release page
open_url "${REPO_URL}/releases/new?tag=${new_release_version}-beta&title=Release%20${new_release_version}%20(beta)&prerelease=1"
printf '%s\n%s' \
  'Publish the beta pre-release. Be sure to auto-generate the release notes.' \
  'Then PRESS ENTER to continue to create the draft release...'
read -r _

# Open the final release page
open_url "${REPO_URL}/releases/new?tag=${new_release_version}&title=Release%20${new_release_version}"
printf '%s\n%s' \
  'Type out the release notes and save the draft release but DO NOT PUBLISH.' \
  'Then PRESS ENTER to continue when ready to create the release tags pull request...'
read -r _

# Prepare to push changes
last_release_version=''
prepare_to_push_changes

# Update version in files, commit changes, and open the new pull request page
push_changes_to_branch "${last_release_version}" "${new_release_version}-beta"
open_url "${REPO_URL}/pull/new/${new_release_tag_branch}?title=feat(release): update Dockerfiles and README to ${new_release_version} tag"
printf '%s\n%s\n%s' \
  'We have now updated the beta tag and pushed the changes.' \
  'Create the draft pull request and test the beta tag though CI and manually.' \
  'Then PRESS ENTER to continue when ready to remove the beta tag and publish the release...'
read -r _

# Update version in files and commit changes
push_changes_to_branch "${new_release_version}-beta" "${new_release_version}"
printf '%s\n%s\n%s\n%s' \
  'We have now set the release tag and pushed the changes.' \
  'Review the draft pull request, test, and merge when ready.' \
  'WARNING: Merging  will break production until the tag is created in the next step.' \
  'Then PRESS ENTER to continue when ready to remove the beta tag and publish the release...'
read -r _

# Final message
open_url "${REPO_URL}/releases/tag/${new_release_version}"
printf '%s\n%s\n' 'Publish the tag ASAP after merging the pull request.' 'Be sure to auto-generate the release notes below the curated notes.'
