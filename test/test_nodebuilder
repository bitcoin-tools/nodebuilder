#!/bin/sh
#
# A console output functional test script for nodebuilder
set -o errexit
set -o nounset

handle_exit() {
  kill_tail_process
  [ -f test_output_stdout.txt ] && rm test_output_stdout.txt
  [ -f test_output_stderr.txt ] && rm test_output_stderr.txt
}

handle_error() {
  handle_exit
  printf '%s\n' "Test failed."
}

kill_tail_process() {
  if kill -0 "${tail_pid}" > /dev/null 2>&1; then
    kill -INT "${tail_pid}"
  fi
}

print_usage() {
  printf '%s\n\n' "Usage: $0 [options]"
  printf '%s\n' "Options:"
  printf '%s\n' "-c, --compile      Build Bitcoin from source"
  printf '%s\n' "-h, --help         Display this help message"
  printf '%s\n' "-r, --ref          Choose a git tef to test"
}

throw_error() {
  if [ -z "$2" ]; then
    echo "ERROR: $1" >&2
  else
    echo "ERROR at line $2: $1" >&2
  fi
  exit 1
}

validate_git_ref_short_name() {
  [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = "true" ] ||
    throw_error "Not inside a Git repository" "${LINENO}"
  [ "$(basename "$(git rev-parse --show-toplevel)")" = "nodebuilder" ] ||
    throw_error "Not in the 'nodebuilder' repository" "${LINENO}"
  git rev-parse --quiet --verify "$1" ||
    throw_error "$1 is not a valid branch, tag, or commit" "${LINENO}"
}

compile_bitcoin="false"
GIT_REF_SHORT_NAME=''

while [ $# -gt 0 ]; do
  case "$1" in
  -c | --compile)
    compile_bitcoin="true"
    ;;
  -h | --help)
    print_usage
    exit 0
    ;;
  -r | --ref)
    [ -z "$2" ] &&
      throw_error "No argument supplied for -r|--ref" "${LINENO}"
    GIT_REF_SHORT_NAME="$2"
    validate_git_ref_short_name "${GIT_REF_SHORT_NAME}"
    shift
    ;;
  *)
    throw_error "'$1' is invalid. Use -h or --help for available options."
    ;;
  esac
  shift
done

[ -f test_output_stdout.txt ] || touch test_output_stdout.txt
tail -f test_output_stdout.txt &
tail_pid=$!

trap 'if [ $? -eq 0 ]; then handle_exit; else handle_error; fi' EXIT

NODEBUILDER_REPO_URL="https://github.com/bitcoin-tools/nodebuilder"
NODEBUILDER_BINARY_URL="${NODEBUILDER_REPO_URL}/raw/${GIT_REF_SHORT_NAME:-master}/nodebuilder"

[ -f nodebuilder ] || wget --no-verbose "${NODEBUILDER_BINARY_URL}"
[ -x nodebuilder ] || chmod u+x nodebuilder
if [ "${compile_bitcoin}" = 'true' ]; then
  ./nodebuilder --compile \
    > test_output_stdout.txt \
    2> test_output_stderr.txt
else
  ./nodebuilder \
    > test_output_stdout.txt \
    2> test_output_stderr.txt
fi
rm nodebuilder
kill_tail_process

if [ -s test_output_stderr.txt ]; then
  printf '%s\n' "Printing the contents of stderr:"
  cat test_output_stderr.txt
  printf '%s\n' "FAILURE: Detected runtime errors."
  exit 1
fi

for message in \
  "Detected: running on (Linux|macOS).$" \
  "Checking internet status... ok.$" \
  "Checking for Bitcoin Core [1-9][0-9]*\.[0-9]+(\.[0-9]+)?... (no|ok).$" \
  "Installing Bitcoin Core... ok.$" \
  "Setting the default node behavior... ok.$" \
  "Checking data already synced... [0-9]+ GiB.$" \
  "Checking free space in home directory... [0-9]+ [GM]iB.$" \
  "Starting Bitcoin Core... ok.$" \
  "Checking the RPC status... ok.$" \
  "..........$" \
  "Syncing the block headers \((first|second) pass\).$" \
  "Sync progress:      [0-9]+\.[0-9]{3} %$" \
  "Blocks remaining:   [0-9]*$" \
  "Current chain tip:  (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [ 1-3][0-9] [0-9]{2}:[0-9]{2}:[0-9]{2} UTC 2[0-9]{3}$" \
  "Chain sync size:    [0-9]+ [GM]iB$" \
  "Disk free space:    [0-9]+ GiB$" \
  "The blockchain download is progressing. Exiting the script.$"; do
  if ! grep -Eq "${message}" test_output_stdout.txt > /dev/null 2>&1; then
    printf '%s\n' "FAILURE: Expected message ${message} not found."
    exit 1
  fi
done

for message in \
  "apt-utils" \
  "libzmq" \
  "BDB" \
  "Berkeley DB" \
  "Checking the memory on your system... 0 GiB of 0 GiB free." \
  "Checking the memory on your system... 0.0 GiB of 0.0 GiB free." \
  "Checking free space in home directory... 0 GiB." \
  "Sync progress:      [0-9]+\.[0-9]{4} %" \
  "Disk free space:    (0 G|[0-9]+ M)iB"; do
  if grep -Eq "${message}" test_output_stdout.txt > /dev/null 2>&1; then
    printf '%s\n' "FAILURE: Unexpected message ${message} found."
    exit 1
  fi
done

if [ "${compile_bitcoin}" = "true" ] ||
  { [ -f /etc/os-release ] && [ "$(grep "^ID=" /etc/os-release | cut -d= -f2)" = "alpine" ]; }; then
  for message in \
    "Ensuring compile dependencies... ok.$" \
    "Downloading Bitcoin source code... ok.$" \
    "Analyzing hardware configuration... ok.$" \
    "Configuring the build environment... ok.$" \
    "Compiling source code, please wait... ok.$"; do
    if ! grep -Eq "${message}" test_output_stdout.txt > /dev/null 2>&1; then
      printf '%s\n' "FAILURE: Expected message ${message} not found."
      exit 1
    fi
  done
else
  for message in \
    "Downloading Bitcoin Core... ok.$" \
    "Validating the checksum... ok.$" \
    "Validating the signatures... [0-9]+ good.$" \
    "Extracting Bitcoin Core... ok.$" \
    "Running the unit tests... ok.$" \
    "Installing Bitcoin Core... ok.$" \
    "Removing installation files... ok.$"; do
    if ! grep -Eq "${message}" test_output_stdout.txt > /dev/null 2>&1; then
      printf '%s\n' "FAILURE: Expected message ${message} not found."
      exit 1
    fi
  done
  # from nodebuilder, gpg_good_signatures_required="7"
  message="Validating the signatures... [0-6] good.$"
  if grep -Eq "${message}" test_output_stdout.txt > /dev/null 2>&1; then
    printf '%s\n' "FAILURE: Unexpected message ${message} found."
    exit 1
  fi
fi

if [ "$(uname -s)" != "Darwin" ]; then
  for message in \
    "Performing a system upgrade... ok.$" \
    "Ensuring runtime dependencies... ok.$" \
    "Creating application shortcuts... ok.$" \
    "Checking the memory on your system... [0-9]+\.[0-9] of [0-9]+\.[0-9] GiB free.$"; do
    if ! grep -Eq "${message}" test_output_stdout.txt > /dev/null 2>&1; then
      printf '%s\n' "FAILURE: Expected message ${message} not found."
      exit 1
    fi
  done
fi

printf '%s\n' "PASS: All console output tests passed."
