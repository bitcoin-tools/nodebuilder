#!/bin/sh
#
# A console output functional test script for nodebuilder
# shellcheck disable=SC2155

set -o errexit
set -o nounset

get_operating_system()
{
  case "${TARGET_KERNEL}" in
    Darwin | FreeBSD | NetBSD | OpenBSD)
      printf '%s\n' "${TARGET_KERNEL}"
      ;;
    *)
      readonly OS_RELEASE_ID_LIKE="$(grep '^ID_LIKE=' /etc/os-release | cut -d= -f2)"
      readonly OS_RELEASE_ID="$(grep '^ID=' /etc/os-release | cut -d= -f2)"

      if [ -n "${OS_RELEASE_ID_LIKE}" ] || [ -n "${OS_RELEASE_ID}" ]; then
        printf '%s\n' "${OS_RELEASE_ID_LIKE:-${OS_RELEASE_ID}}"
      else
        throw_error 'Failed to determine OS release type'
      fi
      ;;
  esac
}

handle_exit()
{
  kill_tail_process
  [ -f nodebuilder ] && rm nodebuilder
  [ -f "${STDOUT_TEST_FILENAME}" ] && rm "${STDOUT_TEST_FILENAME}"
  [ -f "${STDERR_TEST_FILENAME}" ] && rm "${STDERR_TEST_FILENAME}"
}

handle_error()
{
  handle_exit
  printf '%s\n' 'Test failed.'
}

is_valid_bitcoin_version()
{
  [ -z "$1" ] && throw_error 'No arguemnt passed into is_valid_bitcoin_version().'
  readonly BITCOIN_VERSION_TO_CHECK="$1"
  for version in ${VALID_BITCOIN_VERSION_LIST}; do
    [ "${BITCOIN_VERSION_TO_CHECK}" = "${version}" ] &&
      return 0
  done
  return 1
}

kill_tail_process()
{
  if kill -0 "${tail_pid}" > /dev/null 2>&1; then
    kill -TERM "${tail_pid}" ||
      kill -INT "${tail_pid}" ||
      kill -HUP "${tail_pid}" ||
      kill -KILL "${tail_pid}"
  fi
}

print_usage()
{
  printf '%s\n\n' "Usage: $0 [options]"
  printf '%s\n' 'Options:'
  printf '%s\n' '-b, --bitcoin-version   Specify the Bitcoin version'
  printf '%s\n' '-c, --compile           Build Bitcoin from source'
  printf '%s\n' '-j, --jobs              Specify number of compile jobs'
  printf '%s\n' '-h, --help              Display this help message'
  printf '%s\n' '-r, --ref               Choose a git tef to test'
}

throw_error()
{
  if [ -z "${2:-}" ]; then
    echo "ERROR: $1" >&2
  else
    echo "ERROR at line $2: $1" >&2
  fi
  exit 1
}

validate_bitcoin_version()
{
  [ -z "$1" ] && throw_error 'No arguemnt passed into validate_bitcoin_version().'
  readonly BITCOIN_VERSION_TO_VALIDATE="$1"
  if ! is_valid_bitcoin_version "${BITCOIN_VERSION_TO_VALIDATE}"; then
    throw_error "The Bitcoin version '${BITCOIN_VERSION_TO_VALIDATE}' is invalid. Please use a value such as '27.0' from https-bitcoincore-dot-org/bin/"
  fi
}

validate_git_ref_short_name()
{
  [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ] ||
    throw_error 'Not inside a Git repository.' "${LINENO}"
  [ "$(basename "$(git rev-parse --show-toplevel)")" = 'nodebuilder' ] ||
    throw_error 'Not in the nodebuilder repository.' "${LINENO}"
  git rev-parse --quiet --verify "$1" ||
    throw_error "$1 is not a valid branch, tag, or commit." "${LINENO}"
}

readonly VALID_BITCOIN_VERSION_LIST='0.9.5 0.10.0 0.10.1 0.10.2 0.10.3 0.10.4 \
    0.11.0 0.11.1 0.11.2 0.12.0 0.12.1 0.13.0 0.13.1 0.13.2 \0.14.3 0.15.2 \
    0.16.3 0.17.0 0.17.0.1 0.17.1 0.17.2 0.18.0 0.18.1 0.19.0 0.19.0.1 0.19.1 \
    0.20.0 0.20.1 0.20.2 0.21.0 0.21.1 0.21.2 22.0 22.1 23.0 23.1 23.2 24.0 \
    24.0.1 24.1 24.2 25.0 25.1 25.2 26.0 26.1 27.0'

while [ $# -gt 0 ]; do
  case "$1" in
    -b | --bitcoin-version)
      [ -z "$2" ] && throw_error 'No argument supplied for -b|--bitcoin-version.' "${LINENO}"
      readonly TARGET_BITCOIN_VERSION="$2"
      validate_bitcoin_version "${TARGET_BITCOIN_VERSION}"
      shift
      ;;
    -c | --compile)
      readonly COMPILE_BITCOIN='true'
      ;;
    -h | --help)
      print_usage
      exit 0
      ;;
    -j | --jobs)
      # ensure at leaset one additional argument is passed
      if [ $# -eq 1 ]; then
        throw_error '-j/--jobs requires one argumenet'
      fi

      # ensure the argument is a positive integer
      case "$2" in
        0)
          throw_error 'Cannot compile with 0 jobs'
          ;;
        '' | *[!0-9]*)
          throw_error "--jobs requires a positive integer, but $2 is not one."
          ;;
        *)
          readonly NUMBER_OF_COMPILE_JOBS="$2"
          ;;
      esac
      shift
      ;;
    -r | --ref)
      [ -z "$2" ] && throw_error 'No argument supplied for -r|--ref.' "${LINENO}"
      readonly GIT_REF_SHORT_NAME="$2"
      case "$(uname -s)" in
        FreeBSD | NetBSD | OpenBSD) ;;
        *)
          validate_git_ref_short_name "${GIT_REF_SHORT_NAME}"
          ;;
      esac
      shift
      ;;
    *)
      throw_error "'$1' is invalid. Use -h or --help for available options."
      ;;
  esac
  shift
done

[ -z "${GIT_REF_SHORT_NAME:-}" ] && readonly GIT_REF_SHORT_NAME=''
[ -z "${TARGET_BITCOIN_VERSION:-}" ] && readonly TARGET_BITCOIN_VERSION=''
[ "${COMPILE_BITCOIN:-false}" != "true" ] && readonly COMPILE_BITCOIN="false"

readonly STDOUT_TEST_FILENAME='test_output_stdout.txt'
readonly STDERR_TEST_FILENAME='test_output_stderr.txt'

readonly TARGET_KERNEL="$(uname -s)"
readonly TARGET_OPERATING_SYSTEM="$(get_operating_system)"

[ -f "${STDOUT_TEST_FILENAME}" ] || touch "${STDOUT_TEST_FILENAME}"
tail -f "${STDOUT_TEST_FILENAME}" &
tail_pid=$!

trap 'if [ $? -eq 0 ]; then handle_exit; else handle_error; fi' EXIT

readonly NODEBUILDER_REPO_URL='https://github.com/bitcoin-tools/nodebuilder'
readonly NODEBUILDER_BINARY_URL="${NODEBUILDER_REPO_URL}/raw/${GIT_REF_SHORT_NAME:-master}/nodebuilder"

case "${TARGET_KERNEL}" in
  Darwin) bitcoin_data_directory="${HOME}/Library/Application Support/Bitcoin" ;;
  Linux | FreeBSD | NetBSD | OpenBSD) bitcoin_data_directory="${HOME}/.bitcoin" ;;
  MINGW*) throw_error 'Windows is not supported.' ;;
  *) throw_error 'Your operating system is not supported.' ;;
esac
bitcoind_pid_path="${bitcoin_data_directory}/bitcoind.pid"

[ -f nodebuilder ] || wget --no-verbose "${NODEBUILDER_BINARY_URL}"
[ -x nodebuilder ] || chmod u+x nodebuilder

nodebuilder_args=''
[ -n "${TARGET_BITCOIN_VERSION}" ] && nodebuilder_args="${nodebuilder_args} --bitcoin-version ${TARGET_BITCOIN_VERSION}"
if [ "${COMPILE_BITCOIN}" = 'true' ]; then
  if [ -z "${NUMBER_OF_COMPILE_JOBS:-}" ]; then
    nodebuilder_args="${nodebuilder_args} --compile"
  else
    nodebuilder_args="${nodebuilder_args} --compile --jobs ${NUMBER_OF_COMPILE_JOBS}"
  fi
fi

if [ -n "${nodebuilder_args}" ]; then
  # remove extra whitespace from arguments
  readonly NODEBUILDER_ARGS_TRIMMED="$(printf '%s' "${nodebuilder_args}" | sed -e 's/^[[:space:]]*//')"
  printf "Running nodebuilder with '%s' args\n" "${NODEBUILDER_ARGS_TRIMMED}"
  readonly RUN_NODEBUILDER_COMMAND="./nodebuilder ${NODEBUILDER_ARGS_TRIMMED:-}"
else
  printf 'Running nodebuilder with no args\n'
  readonly RUN_NODEBUILDER_COMMAND="./nodebuilder"
fi

# NetBSD has irregular behavior where set -x is applied to child
#   processes too. This behavior seems to be non-POSIX, but to work
#   around the issue, disable set -x during nodebuilder execution.
[ "${TARGET_OPERATING_SYSTEM}" = 'NetBSD' ] && set +x

# Execute the script with optional command line arguments
printf 'Executing command: %s\n' "${RUN_NODEBUILDER_COMMAND}"
if ! ${RUN_NODEBUILDER_COMMAND} \
  > "${STDOUT_TEST_FILENAME}" \
  2> "${STDERR_TEST_FILENAME}"; then
  throw_error "Failed to execute nodebuilder command."
fi

[ "${TARGET_OPERATING_SYSTEM}" = 'NetBSD' ] && set -x

# After the script runs successfully
rm nodebuilder
kill_tail_process

# Stop Bitcoin Core
if [ -f "${bitcoind_pid_path}" ]; then
  read -r bitcoind_pid < "${bitcoind_pid_path}"
  if command -v bitcoin-cli > /dev/null 2>&1; then
    bitcoin-cli stop
    bitcoind_stop_sleep_seconds=2
    bitcoind_stop_sleep_counter=0
    while [ -f "${bitcoind_pid_path}" ]; do
      sleep "${bitcoind_stop_sleep_seconds}"
      # TODO: debug intermittent stalled stop issue
      # shellcheck disable=SC2009
      ps aux | grep "${bitcoind_pid}"
      bitcoind_stop_sleep_counter=$((bitcoind_stop_sleep_counter + 1))
      if [ "$((bitcoind_stop_sleep_seconds * bitcoind_stop_sleep_counter))" -ge 3600 ]; then
        throw_error 'Stopping Bitcoin Core took over an hour.'
      fi
    done
  else
    throw_error 'Unable to find bitcoin-cli in PATH.'
  fi
fi

if [ -s "${STDERR_TEST_FILENAME}" ]; then
  printf '%s\n' 'Printing the contents of stderr:'
  cat "${STDERR_TEST_FILENAME}"
  printf '\n%s\n' 'FAILURE: Detected runtime errors.'
  exit 1
fi

# Positve matches for all environments
for message in \
  'INFO: Detected: running (Linux|macOS|FreeBSD|NetBSD|OpenBSD).$' \
  'INFO: Checking for internet.$' \
  'INFO: Internet checks passed.$' \
  'INFO: Bitcoin Core [1-9][0-9]*\.[0-9]+(\.[0-9]+)?(rc[1-9])? (not|was) found.$' \
  'INFO: Installing Bitcoin Core [1-9][0-9]*\.[0-9]+(\.[0-9]+)?(rc[1-9])?.$' \
  'INFO: Setting the default node behavior.$' \
  'INFO: Found data already synced... [0-9]+ GiB.$' \
  'INFO: Found free space available... [0-9]+ [GM]iB.$' \
  'INFO: Starting Bitcoin Core.$' \
  'INFO: Checking the RPC status.$' \
  'INFO: This info will refresh in 10 seconds.' \
  'INFO: (Pre|Re)-syncing the headers.$' \
  'INFO: Syncing the blockchain. Please be patient.$' \
  'Sync progress:              [0-9]+\.[0-9]{3} %$' \
  'Blocks remaining:           [0-9]*$' \
  'Current chain tip:          (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [ 1-3][0-9] [0-9]{2}:[0-9]{2}:[0-9]{2} UTC 2[0-9]{3}$' \
  'Chain sync size:            [0-9]+ [GM]iB$' \
  'Disk free space:            [0-9]+ GiB$'; do
  if ! grep -Eq "${message}" "${STDOUT_TEST_FILENAME}" > /dev/null 2>&1; then
    printf '%s\n' "FAILURE: Expected message ${message} not found."
    exit 1
  fi
done

# Negative matches for all environments
for message in \
  'apt-utils' \
  'libzmq' \
  'BDB' \
  'Berkeley DB' \
  'Installing Bitcoin Core.$' \
  "TERM variable '[0-9A-Za-z]*' is not recognized. Disabling color." \
  'Checking system memory... 0 of 0 GiB free.' \
  'Checking system memory... 0.0 of 0.0 GiB free.' \
  'INFO: Found free space available... 0 GiB.' \
  'Sync progress:              [0-9]+\.[0-9]{4} %' \
  'Disk free space:            (0 G|[0-9]+ M)iB'; do
  if grep -Eq "${message}" "${STDOUT_TEST_FILENAME}" > /dev/null 2>&1; then
    printf '%s\n' "FAILURE: Unexpected message ${message} found."
    exit 1
  fi
done

# Positve matches when compiling from source
if [ "${COMPILE_BITCOIN}" = 'true' ] ||
  [ "${TARGET_KERNEL}" = 'FreeBSD' ] ||
  [ "${TARGET_KERNEL}" = 'NetBSD' ] ||
  [ "${TARGET_KERNEL}" = 'OpenBSD' ] ||
  {
    [ -f /etc/os-release ] && [ "${TARGET_OPERATING_SYSTEM}" = 'alpine' ]
  }; then
  for message in \
    'INFO: Ensuring compile dependencies.$' \
    'INFO: Downloading Bitcoin source code.$' \
    'INFO: Configuring the build environment.$' \
    'INFO: Compiling source code. Please wait.$'; do
    if ! grep -Eq "${message}" "${STDOUT_TEST_FILENAME}" > /dev/null 2>&1; then
      printf '%s\n' "FAILURE: Expected message ${message} not found."
      exit 1
    fi
  done
# Positive matches when downloading package
else
  for message in \
    'INFO: Downloading Bitcoin Core.$' \
    'INFO: Validated the checksum.$' \
    'INFO: Found [0-9]+ good signatures.$' \
    'INFO: Extracting Bitcoin Core.$' \
    'INFO: Running the unit tests.$' \
    'INFO: Removing installation files.$' \
    'INFO: Bitcoin Core installation complete.$'; do
    if ! grep -Eq "${message}" "${STDOUT_TEST_FILENAME}" > /dev/null 2>&1; then
      printf '%s\n' "FAILURE: Expected message ${message} not found."
      exit 1
    fi
  done
  # from nodebuilder, gpg_good_signatures_required='7'
  message='Found [0-6] good signatures.$'
  if grep -Eq "${message}" "${STDOUT_TEST_FILENAME}" > /dev/null 2>&1; then
    printf '%s\n' "FAILURE: Unexpected message ${message} found."
    exit 1
  fi
fi

# Positive matches for all environments except macOS
if [ "${TARGET_KERNEL}" != 'Darwin' ]; then
  for message in \
    'INFO: Ensuring base dependencies.$' \
    'INFO: Creating application shortcuts.$'; do
    if ! grep -Eq "${message}" "${STDOUT_TEST_FILENAME}" > /dev/null 2>&1; then
      printf '%s\n' "FAILURE: Expected message ${message} not found."
      exit 1
    fi
  done
fi

# Positve matches for Linux kernel environments
if [ "${TARGET_KERNEL}" = 'Linux' ]; then
  message='Checking system memory... [0-9]+\.[0-9] of [0-9]+\.[0-9] GiB free.$'
  if ! grep -Eq "${message}" "${STDOUT_TEST_FILENAME}" > /dev/null 2>&1; then
    printf '%s\n' "FAILURE: Expected message ${message} not found."
    exit 1
  fi
fi

printf '%s\n' 'PASS: All console output tests passed.'
